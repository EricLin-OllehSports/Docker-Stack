# ==========================================
# HAProxy Global Configuration
# ==========================================
# Global settings apply to the entire HAProxy process

global
    # Run as daemon process
    # Options: daemon (background), or comment out for foreground
    daemon
    
    # Logging configuration
    # Format: log <address> <facility> <level>
    # Facilities: local0-local7, mail, daemon, user
    # Levels: emerg, alert, crit, err, warning, notice, info, debug
    log stdout local0 info
    # Alternative logging:
    # log 127.0.0.1:514 local0 info    # Send to syslog server
    # log /dev/log local0 info          # Send to system log
    
    # Security: Change root directory
    # Improves security by limiting file system access
    chroot /var/lib/haproxy
    
    # Statistics socket for runtime API
    # Allows dynamic configuration changes
    # mode: 660 (owner+group read/write)
    # level: admin (administrative access)
    stats socket /run/haproxy/admin.sock mode 660 level admin
    
    # Statistics timeout
    # Options: 10s-300s (recommended: 30s)
    stats timeout 30s
    
    # Process user and group
    # Security: run as non-root user
    user haproxy
    group haproxy
    
    # Additional global options:
    # maxconn 4096              # Maximum concurrent connections
    # nbthread 4                # Number of threads (CPU cores)
    # cpu-map auto:1/1-4 0-3    # CPU affinity mapping
    # tune.ssl.default-dh-param 2048  # DH parameter size

    # ==========================================
    # SSL/TLS Security Configuration
    # ==========================================
    
    # Default SSL cipher suites for incoming connections
    # Modern, secure cipher selection (removes weak ciphers)
    # ECDHE: Forward secrecy, AES-GCM: Authenticated encryption
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
    
    # SSL binding options
    # ssl-min-ver: Minimum TLS version (TLSv1.2 recommended, TLSv1.3 for modern)
    # no-tls-tickets: Disable TLS session tickets (better security)
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    
    # Additional SSL options:
    # ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384  # TLS 1.3 ciphers
    # ssl-default-server-ciphers <cipher-list>     # For outgoing connections
    # ssl-default-server-options ssl-min-ver TLSv1.2  # Server connection options
    # tune.ssl.lifetime 300                        # SSL session lifetime
    # tune.ssl.maxrecord 1400                      # Maximum SSL record size

# ==========================================
# Default Configuration for All Sections
# ==========================================
# These settings apply to frontend, backend, and listen sections
# unless explicitly overridden

defaults
    # Protocol mode
    # Options: http, tcp, health
    # http: Layer 7 (HTTP/HTTPS) - enables content inspection
    # tcp: Layer 4 (TCP) - faster, no content inspection
    mode http
    
    # Use global log configuration
    log global
    
    # HTTP log format
    # Options: httplog, tcplog, httplog clf
    # httplog: detailed HTTP logging
    # tcplog: TCP connection logging
    option httplog
    
    # Don't log null connections (monitoring tools)
    # Reduces log noise from health checks
    option dontlognull
    
    # Log health check attempts
    # Options: enable/disable health check logging
    option log-health-checks
    
    # Enable server redispatch on connection failure
    # Automatically retry failed requests on other servers
    option redispatch
    
    # Number of connection retries before giving up
    # Options: 1-5 (recommended: 2-3)
    retries 3
    
    # Connection timeout to backend servers
    # Options: 1000-10000ms (recommended: 5000ms)
    timeout connect 5000
    
    # Client inactivity timeout
    # Options: 10000-300000ms (recommended: 50000ms)
    timeout client 50000
    
    # Server response timeout
    # Options: 10000-300000ms (recommended: 50000ms)
    timeout server 50000
    
    # Additional timeout options:
    # timeout http-request 10s    # HTTP request timeout
    # timeout http-keep-alive 2s  # Keep-alive timeout
    # timeout check 10s           # Health check timeout
    # timeout tunnel 3600s        # WebSocket/tunnel timeout
    # ==========================================
    # Custom Error Pages
    # ==========================================
    # Define custom error pages for different HTTP status codes
    # Files should contain HTTP response headers + HTML content
    
    errorfile 400 /etc/haproxy/errors/400.http  # Bad Request
    errorfile 403 /etc/haproxy/errors/403.http  # Forbidden
    errorfile 408 /etc/haproxy/errors/408.http  # Request Timeout
    errorfile 500 /etc/haproxy/errors/500.http  # Internal Server Error
    errorfile 502 /etc/haproxy/errors/502.http  # Bad Gateway
    errorfile 503 /etc/haproxy/errors/503.http  # Service Unavailable
    errorfile 504 /etc/haproxy/errors/504.http  # Gateway Timeout
    
    # Additional error codes you might want to customize:
    # errorfile 429 /etc/haproxy/errors/429.http  # Too Many Requests
    # errorfile 413 /etc/haproxy/errors/413.http  # Request Entity Too Large
    # errorfile 414 /etc/haproxy/errors/414.http  # Request-URI Too Long

# Statistics interface
frontend stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE

# Main frontend
frontend nginx_frontend
    bind *:80
    bind *:443 ssl crt /etc/ssl/certs/
    
    # Security headers
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains"
    
    # Redirect HTTP to HTTPS
    redirect scheme https if !{ ssl_fc }
    
    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request reject if { sc_http_req_rate(0) gt 20 }
    
    # ==========================================
    # Backend Selection
    # ==========================================
    # Route requests to appropriate backend servers
    
    # Default backend for all unmatched requests
    default_backend nginx_backend
    
    # Alternative routing examples:
    # use_backend api_backend if { path_beg /api }         # API requests
    # use_backend static_backend if { path_beg /static }   # Static files
    # use_backend app_backend if { hdr(host) -i app.example.com }  # Host-based routing

# NGINX backend cluster
backend nginx_backend
    balance roundrobin
    option httpchk GET /health
    
    # Health check configuration
    http-check expect status 200
    
    # NGINX servers
    server nginx-1 nginx-1:80 check inter 2000ms rise 2 fall 3
    server nginx-2 nginx-2:80 check inter 2000ms rise 2 fall 3
    server nginx-3 nginx-3:80 check inter 2000ms rise 2 fall 3

# Backend for API services (example)
backend api_backend
    balance leastconn
    option httpchk GET /api/health
    
    server api-1 app-1:80 check inter 2000ms rise 2 fall 3
    server api-2 app-2:80 check inter 2000ms rise 2 fall 3

# Frontend for API routing
frontend api_frontend
    bind *:8080
    
    # API path routing
    acl is_api path_beg /api
    use_backend api_backend if is_api
    
    default_backend nginx_backend