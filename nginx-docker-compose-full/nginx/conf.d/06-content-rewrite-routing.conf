# Content Rewrite and Advanced Routing Configuration

# Geographic routing based on IP
geo $country {
    default "US";
    ~^192\.168\. "LOCAL";
    ~^10\. "LOCAL";
    ~^127\. "LOCAL";
    1.0.0.0/8 "CN";
    2.0.0.0/8 "JP";
    3.0.0.0/8 "KR";
}

# User agent detection
map $http_user_agent $mobile {
    default 0;
    ~*android 1;
    ~*iphone 1;
    ~*ipad 1;
    ~*mobile 1;
}

# Content type routing
map $http_accept $content_type {
    default "html";
    ~*json "json";
    ~*xml "xml";
    ~*text "text";
}

# Language detection
map $http_accept_language $lang {
    default "en";
    ~*zh "zh";
    ~*ja "ja";
    ~*ko "ko";
    ~*es "es";
    ~*fr "fr";
}

server {
    listen 80;
    listen [::]:80;
    server_name content.example.com routing.example.com;
    
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name content.example.com routing.example.com;
    
    # SSL Configuration
    ssl_certificate /etc/nginx/ssl/content.example.com.crt;
    ssl_certificate_key /etc/nginx/ssl/content.example.com.key;
    
    # Content Security Policy
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';" always;
    
    # Geographic routing
    location /geo/ {
        # Route based on country
        if ($country = "CN") {
            rewrite ^/geo/(.*)$ /china/$1 last;
        }
        if ($country = "JP") {
            rewrite ^/geo/(.*)$ /japan/$1 last;
        }
        if ($country = "LOCAL") {
            rewrite ^/geo/(.*)$ /local/$1 last;
        }
        
        # Default routing
        rewrite ^/geo/(.*)$ /global/$1 last;
    }
    
    # Mobile/Desktop routing
    location /responsive/ {
        if ($mobile) {
            rewrite ^/responsive/(.*)$ /mobile/$1 last;
        }
        rewrite ^/responsive/(.*)$ /desktop/$1 last;
    }
    
    # Language-based routing
    location /i18n/ {
        set $lang_path "/en";
        
        if ($lang = "zh") {
            set $lang_path "/zh";
        }
        if ($lang = "ja") {
            set $lang_path "/ja";
        }
        if ($lang = "ko") {
            set $lang_path "/ko";
        }
        
        rewrite ^/i18n/(.*)$ $lang_path/$1 last;
    }
    
    # Content type negotiation
    location /api/data/ {
        # Route based on Accept header
        if ($content_type = "json") {
            proxy_pass http://backend_app/json/$uri;
        }
        if ($content_type = "xml") {
            proxy_pass http://backend_app/xml/$uri;
        }
        
        # Default to JSON
        proxy_pass http://backend_app/json/$uri;
        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
    
    # URL rewriting for SEO-friendly URLs
    location / {
        # Product URLs: /product/123 -> /products.php?id=123
        rewrite ^/product/([0-9]+)/?$ /products.php?id=$1 last;
        
        # Category URLs: /category/electronics -> /categories.php?name=electronics
        rewrite ^/category/([a-zA-Z0-9-_]+)/?$ /categories.php?name=$1 last;
        
        # User profiles: /user/john-doe -> /profile.php?username=john-doe
        rewrite ^/user/([a-zA-Z0-9-_]+)/?$ /profile.php?username=$1 last;
        
        # Blog posts: /blog/2023/12/my-post -> /blog.php?year=2023&month=12&slug=my-post
        rewrite ^/blog/([0-9]{4})/([0-9]{2})/([a-zA-Z0-9-_]+)/?$ /blog.php?year=$1&month=$2&slug=$3 last;
        
        # API versioning: /api/v2/users -> /v2/api/users
        rewrite ^/api/v([0-9]+)/(.*)$ /v$1/api/$2 last;
        
        try_files $uri $uri/ @fallback;
    }
    
    # Content transformation and injection
    location /transform/ {
        proxy_pass http://backend_app;
        
        # Response modification
        sub_filter 'http://' 'https://';
        sub_filter_once off;
        
        # Inject analytics code
        sub_filter '</head>' '
        <script>
            // Analytics code injection
            (function() {
                var ga = document.createElement("script");
                ga.src = "https://analytics.example.com/ga.js";
                document.head.appendChild(ga);
            })();
        </script>
        </head>';
        
        # Add custom headers to response
        add_header X-Content-Transformed "yes" always;
        add_header X-Transform-Time $time_iso8601 always;
        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Accept-Encoding "";  # Disable compression for sub_filter
    }
    
    # A/B Testing routing
    location /ab-test/ {
        # Simple A/B testing based on IP hash
        set $group "A";
        if ($remote_addr ~ "[02468]$") {
            set $group "B";
        }
        
        # Route to different backends
        if ($group = "A") {
            rewrite ^/ab-test/(.*)$ /version-a/$1 last;
        }
        if ($group = "B") {
            rewrite ^/ab-test/(.*)$ /version-b/$1 last;
        }
        
        # Add group header for analytics
        add_header X-AB-Group $group always;
    }
    
    # Dynamic upstream selection
    location /dynamic/ {
        set $backend "backend_app";
        
        # Route premium users to dedicated servers
        if ($http_x_user_tier = "premium") {
            set $backend "premium_backend";
        }
        
        # Route based on request load
        if ($request_length > 10000) {
            set $backend "heavy_backend";
        }
        
        proxy_pass http://$backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Backend $backend;
    }
    
    # Conditional redirects
    location /redirect/ {
        # Redirect mobile users to app store
        if ($mobile) {
            return 302 https://apps.example.com/mobile-app;
        }
        
        # Redirect based on user agent
        if ($http_user_agent ~* "bot|crawler|spider") {
            return 403;  # Block bots from certain endpoints
        }
        
        # Maintenance mode
        if (-f /var/www/maintenance.flag) {
            return 503;
        }
        
        proxy_pass http://backend_app;
    }
    
    # Header manipulation
    location /headers/ {
        proxy_pass http://backend_app;
        
        # Remove sensitive headers from backend
        proxy_hide_header X-Internal-Token;
        proxy_hide_header X-Database-Query;
        
        # Add security headers
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        
        # Modify request headers
        proxy_set_header X-Country $country;
        proxy_set_header X-Language $lang;
        proxy_set_header X-Mobile $mobile;
        proxy_set_header X-Original-Host $host;
    }
    
    # Fallback location
    location @fallback {
        proxy_pass http://backend_app;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Fallback "true";
    }
    
    # Error page customization
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        root /usr/share/nginx/html;
        internal;
        sub_filter_once off;
        sub_filter 'COUNTRY' '$country';
        sub_filter 'LANGUAGE' '$lang';
    }
    
    # Logs with routing information
    access_log /var/log/nginx/content-routing.access.log json_combined;
    error_log /var/log/nginx/content-routing.error.log warn;
}