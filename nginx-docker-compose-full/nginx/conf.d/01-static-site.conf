# ==========================================
# Static Website Server Configuration
# ==========================================
# Optimized for serving static content (HTML, CSS, JS, images)
# Use cases: SPAs, documentation sites, marketing pages

# HTTP Server Block - Redirect to HTTPS
server {
    # Listen on HTTP port
    # Options: 80 (standard), 8080 (alternative)
    listen 80;
    
    # IPv6 support
    # Include for dual-stack support
    listen [::]:80;
    
    # Domain configuration
    # Options: specific domain, wildcard (*.example.com), default_server
    # Examples: static.example.com, www.example.com, _
    server_name ${STATIC_DOMAIN:-static.example.com};
    
    # Force HTTPS redirect
    # 301: Permanent redirect (SEO-friendly)
    # 302: Temporary redirect
    # 308: Permanent redirect (preserves method)
    return 301 https://$server_name$request_uri;
    
    # Alternative redirect options:
    # return 301 https://$host$request_uri;          # Use original host
    # return 301 https://www.example.com$request_uri; # Force www
    # if ($host != 'www.example.com') { return 301 https://www.example.com$request_uri; }
}

# HTTPS Server Block - Main Configuration
server {
    # HTTPS with HTTP/2 support
    # ssl: Enable SSL/TLS
    # http2: Enable HTTP/2 protocol (faster)
    # Options: http2 (recommended), http3 (experimental)
    listen 443 ssl http2;
    
    # IPv6 HTTPS support
    listen [::]:443 ssl http2;
    
    # Server name matching
    # Must match SSL certificate CN/SAN
    server_name ${STATIC_DOMAIN:-static.example.com};
    
    # Alternative server name configurations:
    # server_name static.example.com www.static.example.com;  # Multiple domains
    # server_name *.example.com;                              # Wildcard
    # server_name ~^(?<subdomain>\w+)\.example\.com$;           # Regex with capture
    
    # ==========================================
    # SSL/TLS Configuration
    # ==========================================
    
    # SSL certificate files
    # .crt: Certificate file (public key + CA chain)
    # .key: Private key file
    # Alternatives: .pem (combined), .pfx (PKCS#12)
    ssl_certificate /etc/nginx/ssl/${STATIC_DOMAIN:-static.example.com}.crt;
    ssl_certificate_key /etc/nginx/ssl/${STATIC_DOMAIN:-static.example.com}.key;
    
    # Additional SSL options (inherit from main nginx.conf):
    # ssl_certificate_key /etc/nginx/ssl/private.key;     # Separate private key
    # ssl_trusted_certificate /etc/nginx/ssl/chain.crt;   # CA chain for OCSP
    # ssl_dhparam /etc/nginx/ssl/dhparam.pem;             # DH parameters
    # ssl_session_cache shared:SSL:1m;                    # Session cache
    # ssl_session_timeout 10m;                            # Session timeout
    
    # ==========================================
    # Document Root Configuration
    # ==========================================
    
    # Website root directory
    # Options: /usr/share/nginx/html, /var/www/html, /app/dist
    # For containers: usually /usr/share/nginx/html
    root ${STATIC_ROOT:-/usr/share/nginx/html};
    
    # Default index files (priority order)
    # Options: index.html, index.htm, default.html
    # For SPAs: usually just index.html
    index index.html index.htm default.html;
    
    # Additional root options:
    # autoindex on;                    # Enable directory listing
    # autoindex_exact_size off;       # Human-readable file sizes
    # autoindex_localtime on;         # Local timezone for timestamps
    
    # ==========================================
    # Security Headers
    # ==========================================
    
    # HTTP Strict Transport Security (HSTS)
    # max-age: 31536000 (1 year), 15768000 (6 months)
    # includeSubDomains: Apply to all subdomains
    # preload: Submit to HSTS preload list
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # Content Security Policy (CSP)
    # Prevents XSS attacks by controlling resource loading
    # default-src: Default policy for all resource types
    # script-src: JavaScript sources
    # style-src: CSS sources
    # img-src: Image sources
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self';" always;
    
    # Alternative CSP configurations:
    # Strict CSP: "default-src 'self'; script-src 'self'; style-src 'self'; img-src 'self';"
    # Allow CDNs: "script-src 'self' https://cdnjs.cloudflare.com; style-src 'self' https://fonts.googleapis.com;"
    # Report-only: add_header Content-Security-Policy-Report-Only "..." always;
    
    # ==========================================
    # Rate Limiting & Connection Control
    # ==========================================
    
    # Request rate limiting
    # zone: defined in main nginx.conf
    # burst: allow burst of requests
    # nodelay: don't delay burst requests
    # Options: burst=5-20, delay (default) vs nodelay
    limit_req zone=general burst=10 nodelay;
    
    # Connection limiting per IP
    # addr: zone defined in main nginx.conf
    # 10: maximum concurrent connections per IP
    # Options: 5-50 depending on use case
    limit_conn addr 10;
    
    # Additional rate limiting options:
    # limit_req zone=static burst=50 nodelay;     # Higher limits for static files
    # limit_req_status 429;                       # Custom status code
    # limit_conn_status 503;                      # Custom connection limit status
    
    # ==========================================
    # Static Assets - Long-term Caching
    # ==========================================
    # For versioned assets that never change
    
    location ~* \.(jpg|jpeg|png|gif|ico|webp|avif|css|js|woff|woff2|ttf|eot|svg|pdf)$ {
        # Cache duration options:
        # 1y (1 year) - for versioned assets
        # 1M (1 month) - for semi-static content
        # 1w (1 week) - for frequently updated content
        expires 1y;
        
        # Cache-Control directives
        # public: can be cached by browsers and CDNs
        # immutable: content never changes (HTTP/2 feature)
        # no-transform: prevent compression/optimization by proxies
        add_header Cache-Control "public, immutable, no-transform";
        
        # Vary header for compression
        # Tells caches to store different versions based on encoding
        add_header Vary "Accept-Encoding";
        
        # Disable access logging for static files (performance)
        # Comment out if you need logs for analytics
        access_log off;
        
        # Additional optimizations:
        # sendfile on;           # Efficient file serving (inherited)
        # tcp_nopush on;         # Send headers and file in one packet
        # gzip_static on;        # Serve pre-compressed files if available
        
        # Security for static files:
        # add_header X-Content-Type-Options nosniff;
        # add_header X-Frame-Options DENY;
    }
    
    # ==========================================
    # HTML Files - No Caching (Dynamic Content)
    # ==========================================
    # For SPAs and content that changes frequently
    
    location ~* \.(html|htm)$ {
        # Disable caching completely
        # -1: expired immediately
        # Alternative: expires 0; (also disables caching)
        expires -1;
        
        # Comprehensive no-cache headers
        # no-cache: must revalidate with server
        # no-store: don't store in any cache
        # must-revalidate: must check with server when stale
        # proxy-revalidate: proxies must revalidate
        add_header Cache-Control "no-cache, no-store, must-revalidate, proxy-revalidate";
        
        # Legacy cache prevention (HTTP/1.0)
        add_header Pragma "no-cache";
        
        # ETag handling for HTML
        # etag off;              # Disable ETags if not needed
        
        # SPA fallback routing
        # Try file, then directory, then fallback to index.html
        try_files $uri $uri/ /index.html;
        
        # Alternative try_files patterns:
        # try_files $uri $uri/ @fallback;           # Use named location
        # try_files $uri $uri/ /404.html;           # Custom 404 page
        # try_files $uri $uri/index.html /index.html; # More specific fallback
    }
    
    # ==========================================
    # Main Location Block
    # ==========================================
    # Handles all requests not matched by specific locations
    
    location / {
        # File resolution order
        # 1. Exact file match
        # 2. Directory with trailing slash
        # 3. Fallback to index.html (SPA routing)
        try_files $uri $uri/ /index.html;
        
        # ==========================================
        # CORS Configuration
        # ==========================================
        # Cross-Origin Resource Sharing for API integration
        
        # Allow origins (security consideration)
        # "*": Allow all origins (development only)
        # "https://app.example.com": Specific domain
        # "$http_origin": Dynamic based on request
        add_header Access-Control-Allow-Origin "${CORS_ORIGIN:-*}" always;
        
        # Allowed HTTP methods
        # Common: GET, POST, PUT, DELETE, OPTIONS, PATCH
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH" always;
        
        # Allowed request headers
        # Authorization: for JWT tokens
        # Content-Type: for JSON/form data
        # X-Requested-With: for AJAX detection
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With, Accept, Origin" always;
        
        # Credentials support (cookies, auth headers)
        # add_header Access-Control-Allow-Credentials true always;
        
        # Preflight cache duration
        # add_header Access-Control-Max-Age 3600 always;
        
        # Handle CORS preflight requests
        if ($request_method = 'OPTIONS') {
            # Add specific headers for preflight
            add_header Access-Control-Allow-Origin "${CORS_ORIGIN:-*}";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH";
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With, Accept, Origin";
            add_header Access-Control-Max-Age 1728000;  # 20 days
            add_header Content-Type 'text/plain; charset=utf-8';
            add_header Content-Length 0;
            return 204;
        }
    }
    
    # Security: Block sensitive files
    location ~ /\.(ht|git|svn) {
        deny all;
        return 404;
    }
    
    # ==========================================
    # Logging Configuration
    # ==========================================
    
    # Access log with structured JSON format
    # Formats: combined, json_combined (defined in main config)
    # Options: off (disable), buffer=32k (performance)
    access_log /var/log/nginx/static-site.access.log json_combined buffer=32k flush=5s;
    
    # Error log with severity level
    # Levels: debug, info, notice, warn, error, crit, alert, emerg
    # warn: recommended for production
    # debug: for troubleshooting (verbose)
    error_log /var/log/nginx/static-site.error.log ${LOG_LEVEL:-warn};
    
    # Conditional logging examples:
    # map $status $loggable {
    #     ~^[23]  0;      # Don't log 2xx and 3xx
    #     default 1;      # Log everything else
    # }
    # access_log /var/log/nginx/static-site.access.log json_combined if=$loggable;
    
    # Performance logging:
    # access_log /var/log/nginx/slow.log combined if=$slow_request;
    
    # ==========================================
    # Additional Location Blocks (Optional)
    # ==========================================
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Robots.txt (SEO)
    location = /robots.txt {
        access_log off;
        log_not_found off;
        try_files $uri =404;
    }
    
    # Favicon handling
    location = /favicon.ico {
        access_log off;
        log_not_found off;
        expires 1y;
        try_files $uri =404;
    }
    
    # Service worker (for PWAs)
    location = /sw.js {
        expires -1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
    }
    
    # API proxy (if needed)
    # location /api/ {
    #     proxy_pass http://backend_api;
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;
    # }
}