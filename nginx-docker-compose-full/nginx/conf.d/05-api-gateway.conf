# API Gateway Configuration

# API services upstream definitions
upstream auth_service {
    server app-1:8001 weight=1 max_fails=3 fail_timeout=30s;
    server app-2:8001 weight=1 max_fails=3 fail_timeout=30s;
    keepalive 16;
}

upstream user_service {
    server app-1:8002 weight=1 max_fails=3 fail_timeout=30s;
    server app-2:8002 weight=1 max_fails=3 fail_timeout=30s;
    keepalive 16;
}

upstream order_service {
    server app-1:8003 weight=1 max_fails=3 fail_timeout=30s;
    server app-2:8003 weight=1 max_fails=3 fail_timeout=30s;
    keepalive 16;
}

upstream payment_service {
    server app-1:8004 weight=1 max_fails=3 fail_timeout=30s;
    server app-2:8004 weight=1 max_fails=3 fail_timeout=30s;
    keepalive 16;
}

# Rate limiting zones for different API tiers
limit_req_zone $binary_remote_addr zone=api_public:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=api_premium:10m rate=50r/s;
limit_req_zone $binary_remote_addr zone=api_internal:10m rate=100r/s;

# API key authentication map
map $http_x_api_key $api_tier {
    default "public";
    "premium-key-123" "premium";
    "internal-key-456" "internal";
}

server {
    listen 80;
    listen [::]:80;
    server_name api.example.com gateway.example.com;
    
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name api.example.com gateway.example.com;
    
    # SSL Configuration
    ssl_certificate /etc/nginx/ssl/api.example.com.crt;
    ssl_certificate_key /etc/nginx/ssl/api.example.com.key;
    
    # API Gateway specific headers
    add_header X-API-Gateway "nginx-gateway" always;
    add_header X-Rate-Limit-Remaining $rate_limit_remaining always;
    add_header Access-Control-Allow-Origin "*" always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH" always;
    add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-API-Key, X-Requested-With" always;
    add_header Access-Control-Max-Age "3600" always;
    
    # Handle CORS preflight requests
    if ($request_method = 'OPTIONS') {
        return 204;
    }
    
    # API Gateway status and health
    location /gateway/health {
        access_log off;
        return 200 '{"status":"ok","timestamp":"$time_iso8601","version":"1.0"}';
        add_header Content-Type application/json;
    }
    
    # API documentation and swagger
    location /docs/ {
        root /usr/share/nginx/html/api-docs;
        try_files $uri $uri/ /index.html;
        
        # Cache API docs
        expires 1h;
        add_header Cache-Control "public";
    }
    
    # Authentication service
    location /auth/ {
        # Rate limiting based on API tier
        limit_req zone=api_public burst=20 nodelay;
        
        proxy_pass http://auth_service/;
        
        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # API Gateway headers
        proxy_set_header X-API-Gateway "nginx";
        proxy_set_header X-Request-ID $request_id;
        proxy_set_header X-API-Tier $api_tier;
        
        # Timeout settings for auth service
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
    }
    
    # User service with authentication
    location /users/ {
        # Authentication subrequest
        auth_request /auth/validate;
        auth_request_set $user_id $upstream_http_x_user_id;
        auth_request_set $user_role $upstream_http_x_user_role;
        
        # Rate limiting based on user tier
        limit_req zone=api_premium burst=30 nodelay;
        
        proxy_pass http://user_service/;
        
        # Forward authentication information
        proxy_set_header X-User-ID $user_id;
        proxy_set_header X-User-Role $user_role;
        proxy_set_header X-Original-URI $request_uri;
        
        # Standard headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
    }
    
    # Order service with rate limiting per user
    location /orders/ {
        # User-based rate limiting
        limit_req_zone $user_id zone=user_orders:10m rate=5r/s;
        limit_req zone=user_orders burst=10 nodelay;
        
        # Authentication required
        auth_request /auth/validate;
        auth_request_set $user_id $upstream_http_x_user_id;
        
        proxy_pass http://order_service/;
        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-User-ID $user_id;
        proxy_set_header X-Request-ID $request_id;
        
        # Circuit breaker settings
        proxy_next_upstream error timeout http_500 http_502 http_503;
        proxy_next_upstream_tries 2;
        proxy_next_upstream_timeout 5s;
    }
    
    # Payment service with extra security
    location /payments/ {
        # Strict rate limiting for payments
        limit_req zone=api_premium burst=5 nodelay;
        
        # Authentication and authorization
        auth_request /auth/validate;
        auth_request_set $user_id $upstream_http_x_user_id;
        auth_request_set $user_role $upstream_http_x_user_role;
        
        # Only allow POST and GET for payments
        if ($request_method !~ ^(GET|POST)$) {
            return 405;
        }
        
        proxy_pass http://payment_service/;
        
        # Security headers for payment service
        proxy_set_header X-User-ID $user_id;
        proxy_set_header X-User-Role $user_role;
        proxy_set_header X-Request-ID $request_id;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Shorter timeouts for payment security
        proxy_connect_timeout 3s;
        proxy_send_timeout 15s;
        proxy_read_timeout 15s;
    }
    
    # Internal authentication validation endpoint
    location = /auth/validate {
        internal;
        proxy_pass http://auth_service/validate;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header X-Original-Method $request_method;
        proxy_set_header Authorization $http_authorization;
        proxy_set_header X-API-Key $http_x_api_key;
    }
    
    # API versioning support
    location ~ ^/v([0-9]+)/(.*) {
        set $api_version $1;
        set $api_path $2;
        
        # Version-specific routing
        if ($api_version = "1") {
            proxy_pass http://backend_app/api/v1/$api_path;
        }
        if ($api_version = "2") {
            proxy_pass http://api_servers/api/v2/$api_path;
        }
        
        # Version headers
        proxy_set_header X-API-Version $api_version;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
    
    # WebSocket gateway
    location /ws/ {
        auth_request /auth/validate;
        
        proxy_pass http://backend_app;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        
        # WebSocket timeouts
        proxy_read_timeout 3600s;
        proxy_send_timeout 3600s;
    }
    
    # Error handling
    error_page 401 = @error401;
    error_page 403 = @error403;
    error_page 429 = @error429;
    error_page 502 503 504 = @error5xx;
    
    location @error401 {
        return 401 '{"error":"unauthorized","message":"Authentication required"}';
        add_header Content-Type application/json always;
    }
    
    location @error403 {
        return 403 '{"error":"forbidden","message":"Insufficient permissions"}';
        add_header Content-Type application/json always;
    }
    
    location @error429 {
        return 429 '{"error":"rate_limit_exceeded","message":"Too many requests"}';
        add_header Content-Type application/json always;
    }
    
    location @error5xx {
        return 503 '{"error":"service_unavailable","message":"Backend service unavailable"}';
        add_header Content-Type application/json always;
    }
    
    # Logs with detailed information
    access_log /var/log/nginx/api-gateway.access.log json_combined;
    error_log /var/log/nginx/api-gateway.error.log warn;
}