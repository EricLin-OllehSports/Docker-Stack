# Load Balancer Configuration

# Define multiple backend servers
upstream web_servers {
    # Load balancing methods: round_robin (default), least_conn, ip_hash, hash
    least_conn;
    
    # Backend servers with health checks
    server app-1:80 weight=3 max_fails=3 fail_timeout=30s;
    server app-2:80 weight=2 max_fails=3 fail_timeout=30s;
    server nginx-1:80 weight=1 max_fails=3 fail_timeout=30s backup;
    
    # Keep alive connections
    keepalive 32;
    keepalive_requests 100;
    keepalive_timeout 60s;
}

# API backend cluster
upstream api_servers {
    hash $request_uri consistent;  # Consistent hashing for session affinity
    
    server app-1:80 weight=1;
    server app-2:80 weight=1;
    
    keepalive 16;
}

# Database proxy upstream
upstream db_proxy {
    server app-1:3306 weight=1 max_fails=2 fail_timeout=10s;
    server app-2:3306 weight=1 max_fails=2 fail_timeout=10s backup;
}

server {
    listen 80;
    listen [::]:80;
    server_name lb.example.com;
    
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name lb.example.com;
    
    # SSL Configuration
    ssl_certificate /etc/nginx/ssl/lb.example.com.crt;
    ssl_certificate_key /etc/nginx/ssl/lb.example.com.key;
    
    # Rate limiting
    limit_req zone=general burst=30 nodelay;
    limit_conn addr 50;
    
    # Load balancer status page
    location /lb-status {
        access_log off;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
        
        return 200 "Load Balancer Status: OK\nUpstream: web_servers\nTime: $time_iso8601\n";
        add_header Content-Type text/plain;
    }
    
    # Main web application load balancing
    location / {
        proxy_pass http://web_servers;
        
        # Proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Session persistence (sticky sessions)
        proxy_set_header X-Session-ID $cookie_session_id;
        
        # Health check and failover
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
        proxy_next_upstream_tries 2;
        proxy_next_upstream_timeout 5s;
        
        # Connection pooling
        proxy_http_version 1.1;
        proxy_set_header Connection "";
    }
    
    # API load balancing with session affinity
    location /api/ {
        proxy_pass http://api_servers;
        
        # API rate limiting
        limit_req zone=api burst=100 nodelay;
        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Session affinity based on API key or user ID
        proxy_set_header X-User-ID $http_x_user_id;
        
        # Circuit breaker pattern
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
        
        proxy_next_upstream error timeout http_500 http_502 http_503;
        proxy_next_upstream_tries 3;
    }
    
    # WebSocket load balancing
    location /ws/ {
        proxy_pass http://web_servers;
        
        # WebSocket headers
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        
        # WebSocket timeout
        proxy_read_timeout 3600s;
        proxy_send_timeout 3600s;
    }
    
    # Upload load balancing with larger timeouts
    location /upload/ {
        client_max_body_size 100M;
        client_body_timeout 60s;
        
        proxy_pass http://web_servers;
        proxy_request_buffering off;
        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        
        proxy_connect_timeout 10s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
    
    # Error pages
    error_page 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    # Logs with upstream information
    access_log /var/log/nginx/load-balancer.access.log json_combined;
    error_log /var/log/nginx/load-balancer.error.log warn;
}