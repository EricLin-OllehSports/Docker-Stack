# Reverse Proxy Configuration
server {
    listen 80;
    listen [::]:80;
    server_name app.example.com;
    
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name app.example.com;
    
    # SSL Configuration
    ssl_certificate /etc/nginx/ssl/app.example.com.crt;
    ssl_certificate_key /etc/nginx/ssl/app.example.com.key;
    
    # Rate limiting
    limit_req zone=general burst=20 nodelay;
    limit_conn addr 20;
    
    # Proxy headers
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Port $server_port;
    
    # Proxy timeouts
    proxy_connect_timeout 30s;
    proxy_send_timeout 30s;
    proxy_read_timeout 30s;
    
    # Buffer settings
    proxy_buffering on;
    proxy_buffer_size 4k;
    proxy_buffers 8 4k;
    proxy_busy_buffers_size 8k;
    
    # Main application
    location / {
        proxy_pass http://backend_app;
        
        # Health check bypass
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 3;
        proxy_next_upstream_timeout 10s;
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
    
    # API endpoints with different rate limiting
    location /api/ {
        limit_req zone=api burst=50 nodelay;
        
        proxy_pass http://backend_app;
        
        # API-specific headers
        add_header X-API-Version "v1" always;
        
        # CORS for API
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-API-Key" always;
        
        if ($request_method = 'OPTIONS') {
            return 204;
        }
    }
    
    # Static assets from backend
    location /assets/ {
        proxy_pass http://backend_app;
        proxy_cache_valid 200 1d;
        proxy_cache_valid 404 1m;
        expires 1d;
        add_header Cache-Control "public";
    }
    
    # Health check endpoint
    location /health {
        proxy_pass http://backend_app/health;
        access_log off;
        proxy_connect_timeout 5s;
        proxy_read_timeout 5s;
    }
    
    # Logs
    access_log /var/log/nginx/reverse-proxy.access.log json_combined;
    error_log /var/log/nginx/reverse-proxy.error.log warn;
}