# ==========================================
# Fluent Bit Service Configuration
# ==========================================
# Global service settings for the Fluent Bit process

[SERVICE]
    # Flush interval in seconds
    # How often to flush output buffers
    # Options: 1-30 seconds (5 recommended for balanced performance)
    Flush         ${FLUENT_FLUSH_INTERVAL:-5}
    
    # Log level for internal Fluent Bit logs
    # Options: error, warn, info, debug, trace
    # info: recommended for production
    # debug: for troubleshooting
    Log_Level     ${FLUENT_LOG_LEVEL:-info}
    
    # Run as daemon process
    # Options: on (background), off (foreground)
    # off: recommended for containers
    Daemon        off
    
    # Parser configuration file
    # Defines how to parse different log formats
    # Default: parsers.conf (built-in parsers)
    Parsers_File  parsers.conf
    
    # Enable HTTP server for metrics and health checks
    # Options: On, Off
    HTTP_Server   ${FLUENT_HTTP_SERVER:-On}
    
    # HTTP server listen address
    # Options: 0.0.0.0 (all interfaces), 127.0.0.1 (localhost only)
    HTTP_Listen   ${FLUENT_HTTP_LISTEN:-0.0.0.0}
    
    # HTTP server port
    # Default: 2020, alternatives: 9880, 24224
    HTTP_Port     ${FLUENT_HTTP_PORT:-2020}
    
    # Additional service options:
    # Grace         30              # Graceful shutdown timeout
    # DNS.Mode      UDP             # DNS resolution mode
    # storage.path  /tmp/flb-storage # Storage for buffering
    # storage.sync  normal          # Storage sync mode
    # storage.checksum off          # Enable checksum verification

# ==========================================
# Input: NGINX All Logs
# ==========================================
# Tail all NGINX log files with wildcard pattern

[INPUT]
    # Input plugin type
    # Options: tail, forward, tcp, udp, systemd, kmsg
    Name              tail
    
    # Log file path pattern
    # Wildcard patterns supported: *, ?, []
    # Examples: /var/log/nginx/*.log, /var/log/app-*.log
    Path              /var/log/nginx/*.log
    
    # Parser to use for log parsing
    # Must be defined in parsers.conf
    # Options: nginx_json, apache, json, regex
    Parser            nginx_json
    
    # Tag for routing (used in filters and outputs)
    # Supports wildcards and regex patterns
    # nginx.* will create tags like nginx.access, nginx.error
    Tag               nginx.*
    
    # File refresh interval in seconds
    # How often to check for new files
    # Options: 1-60 seconds (5 recommended)
    Refresh_Interval  ${NGINX_REFRESH_INTERVAL:-5}
    
    # Memory buffer limit per file
    # Prevents memory exhaustion from large log files
    # Options: 32MB, 50MB, 100MB, 256MB
    Mem_Buf_Limit     ${NGINX_MEM_BUF_LIMIT:-50MB}
    
    # Skip lines longer than buffer size
    # Prevents processing of extremely long lines
    # Options: On (recommended), Off
    Skip_Long_Lines   On
    
    # Additional tail options:
    # Read_from_Head    On          # Start from beginning of file
    # Skip_BOM          On          # Skip UTF-8 BOM
    # Buffer_Chunk_Size 32KB        # Read buffer size
    # Buffer_Max_Size   256KB       # Maximum buffer size
    # Path_Key          filepath    # Add filepath to record
    # Exclude_Path      *.tmp       # Exclude files matching pattern

# ==========================================
# Input: NGINX Access Logs (Specific)
# ==========================================
# Dedicated input for access logs with specific configuration

[INPUT]
    # Tail plugin for file monitoring
    Name              tail
    
    # Specific access log file
    # More precise than wildcard for important logs
    Path              /var/log/nginx/access.log
    
    # JSON parser for structured access logs
    # Matches the json_combined format from nginx.conf
    Parser            nginx_json
    
    # Specific tag for access logs
    # Allows targeted filtering and routing
    Tag               nginx.access
    
    # Refresh interval for access logs
    # Can be more frequent for high-traffic sites
    Refresh_Interval  ${ACCESS_LOG_REFRESH_INTERVAL:-5}
    
    # Access log specific options:
    # Mem_Buf_Limit     100MB       # Higher limit for busy sites
    # Read_from_Head    Off         # Start from end for existing logs
    # Buffer_Chunk_Size 64KB        # Larger chunks for high volume

# ==========================================
# Input: NGINX Error Logs
# ==========================================
# Dedicated input for error logs monitoring

[INPUT]
    # Tail plugin for error log monitoring
    Name              tail
    
    # NGINX error log file path
    Path              /var/log/nginx/error.log
    
    # Error log parser (different from access logs)
    # nginx_error parser handles standard NGINX error format
    Parser            nginx_error
    
    # Error-specific tag for routing
    # Enables specific filtering and alerting
    Tag               nginx.error
    
    # Error log refresh interval
    # Can be more frequent for critical error monitoring
    Refresh_Interval  ${ERROR_LOG_REFRESH_INTERVAL:-5}
    
    # Error log specific options:
    # Mem_Buf_Limit     32MB        # Usually smaller than access logs
    # Skip_Long_Lines   Off         # May want full error traces
    # Read_from_Head    On          # Capture existing errors on startup

# ==========================================
# Filter: Add Metadata to Records
# ==========================================
# Enrich log records with additional context information

[FILTER]
    # Modify filter for adding/removing fields
    # Other filter types: grep, parser, lua, throttle
    Name                modify
    
    # Match pattern for applying filter
    # nginx.*: matches all nginx tags (access, error, etc.)
    # Alternatives: nginx.access, nginx.error, *
    Match               nginx.*
    
    # Add service identifier
    # Useful for multi-service environments
    Add                 service ${SERVICE_NAME:-nginx}
    
    # Add environment label
    # Options: development, staging, production
    Add                 environment ${ENVIRONMENT:-production}
    
    # Add version information
    # Helps track issues across deployments
    Add                 version ${NGINX_VERSION:-1.25}
    
    # Additional metadata you might add:
    # Add                 cluster ${CLUSTER_NAME:-default}
    # Add                 region ${AWS_REGION:-us-east-1}
    # Add                 hostname ${HOSTNAME}
    # Add                 datacenter ${DATACENTER:-dc1}
    
    # Other modify operations:
    # Remove              sensitive_field    # Remove fields
    # Rename              old_name new_name  # Rename fields
    # Set                 field value        # Set field value
    # Copy                source dest        # Copy field

# ==========================================
# Filter: Exclude Successful Requests (Optional)
# ==========================================
# Filter out noise from successful requests to reduce log volume
# Comment out this section if you need all access logs

[FILTER]
    # Grep filter for pattern matching
    # Used to include/exclude log records based on content
    Name                grep
    
    # Apply only to access logs
    # Preserves error logs and other important events
    Match               nginx.access
    
    # Exclude successful requests (status 200)
    # Reduces log volume by filtering out routine traffic
    # Options: 200, 2xx (for all 2xx status codes)
    Exclude             status ${EXCLUDE_STATUS:-200}
    
    # Alternative filtering examples:
    # Exclude             status 200 301 302 304  # Multiple status codes
    # Regex               status ^[23]             # Regex pattern for 2xx and 3xx
    # Include             status ^[45]             # Only include 4xx and 5xx errors
    
    # Additional grep filter options:
    # Exclude             user_agent "HealthChecker"     # Filter health checks
    # Exclude             remote_addr "127.0.0.1"       # Filter localhost
    # Include             method "POST|PUT|DELETE"      # Only mutating requests
    # Regex               request_uri "^/api/"          # Only API endpoints

# ==========================================
# Output: Console Output (Development)
# ==========================================
# Send logs to stdout for development and debugging

[OUTPUT]
    # Standard output plugin
    # Other output options: forward, http, file, s3, elasticsearch
    Name  stdout
    
    # Match all nginx logs
    # Use specific tags for targeted output: nginx.access, nginx.error
    Match nginx.*
    
    # Output format options:
    # json_lines: one JSON object per line (recommended)
    # json: pretty-printed JSON
    # msgpack: binary format (compact)
    Format ${STDOUT_FORMAT:-json_lines}
    
    # Additional stdout options:
    # json_date_key     timestamp    # Custom timestamp field name
    # json_date_format  %Y-%m-%d %H:%M:%S  # Custom date format

# ==========================================
# Output: Forward to Aggregator (Disabled)
# ==========================================
# Send logs to another Fluent Bit/Fluentd instance
# Uncomment and configure for centralized logging

# [OUTPUT]
#     # Forward output plugin for log aggregation
#     # Sends logs to another Fluent Bit or Fluentd instance
#     Name          forward
#     
#     # Match pattern for logs to forward
#     Match         nginx.*
#     
#     # Target aggregator hostname/IP
#     # Options: fluent-aggregator, log-collector.internal
#     Host          ${FLUENT_AGGREGATOR_HOST:-fluent-aggregator}
#     
#     # Target port (Fluent Bit: 24224, Fluentd: 24224)
#     Port          ${FLUENT_AGGREGATOR_PORT:-24224}
#     
#     # Require acknowledgment from receiver
#     # Ensures delivery reliability
#     Require_ack_response ${FLUENT_REQUIRE_ACK:-true}
#     
#     # Additional forward options:
#     # tls           On                    # Enable TLS encryption
#     # tls.verify    Off                   # Skip certificate verification
#     # shared_key    secret_key            # Shared key authentication
#     # compress      gzip                  # Compress data before sending
#     # workers       2                     # Number of workers

# ==========================================
# Additional Output Examples
# ==========================================

# Send to Elasticsearch
# [OUTPUT]
#     Name            es
#     Match           nginx.*
#     Host            elasticsearch
#     Port            9200
#     Index           nginx-logs
#     Type            _doc
#     Logstash_Format On
#     Logstash_Prefix nginx
#     Time_Key        @timestamp

# Send to AWS CloudWatch
# [OUTPUT]
#     Name            cloudwatch_logs
#     Match           nginx.*
#     region          us-east-1
#     log_group_name  /aws/nginx
#     log_stream_name nginx-${HOSTNAME}
#     auto_create_group On

# Send to Prometheus (metrics)
# [OUTPUT]
#     Name            prometheus_exporter
#     Match           nginx.*
#     host            0.0.0.0
#     port            2021

# Send to file (backup)
# [OUTPUT]
#     Name            file
#     Match           nginx.error
#     Path            /var/log/fluent-bit/
#     File            nginx-errors.log
#     Format          json_lines