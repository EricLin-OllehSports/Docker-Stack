# ========================================================
# MySQL Docker Compose - Development Environment
# ========================================================
# 
# This configuration provides two MySQL deployment modes:
# 
# 1. Single Instance:     docker-compose --profile single up -d
#    - Port: 3306
#    - Use case: Development, testing
# 
# 2. Master-Slave:        docker-compose --profile replication up -d
#    - Master: 3307, Slave: 3308
#    - Use case: Replication testing, read scaling
# 
# Data volumes: ${HOME}/container-data/mysql/
# ========================================================

networks:
  mysql-network:
    driver: bridge

services:
  # ========================================
  # Single Instance Mode
  # ========================================
  mysql-single:
    image: arm64v8/mysql:8.2
    container_name: mysql-single
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: ollehsports
      MYSQL_USER: sa
      MYSQL_PASSWORD: sa
    command:
      - --default-authentication-plugin=mysql_native_password
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    volumes:
      - "${HOME}/container-data/mysql/single:/var/lib/mysql"
    ports:
      - "3306:3306"
    networks:
      - mysql-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    profiles:
      - single

  # ========================================
  # Master-Slave Replication Mode
  # ========================================
  mysql-master:
    image: arm64v8/mysql:8.2
    container_name: mysql-master
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: ollehsports
      MYSQL_USER: sa
      MYSQL_PASSWORD: sa
    command:
      - --default-authentication-plugin=mysql_native_password
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --server-id=1
      - --log-bin=mysql-bin
      - --binlog-format=ROW
      - --gtid-mode=ON
      - --enforce-gtid-consistency
    volumes:
      - "${HOME}/container-data/mysql/master:/var/lib/mysql"
      - "./scripts/init-master.sql:/docker-entrypoint-initdb.d/init-master.sql"
    ports:
      - "3307:3306"
    networks:
      - mysql-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    profiles:
      - replication

  mysql-slave:
    image: arm64v8/mysql:8.2
    container_name: mysql-slave
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: ollehsports
    depends_on:
      mysql-master:
        condition: service_healthy
    entrypoint: ["bash", "/usr/local/bin/start-slave.sh"]
    command:
      - --slave-skip-errors=1032
    volumes:
      - "${HOME}/container-data/mysql/slave:/var/lib/mysql"
      - "./scripts/init-slave.sh:/docker-entrypoint-initdb.d/init-slave.sh"
      - "./scripts/start-slave.sh:/usr/local/bin/start-slave.sh"
    ports:
      - "3308:3306"
    networks:
      - mysql-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    profiles:
      - replication
